<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
    <display-name>webManger</display-name>
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>
  
    <display-name>Archetype Created Web Application</display-name>
    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:/spring-*.xml</param-value>
    </context-param>
    <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- openSessionInView配置 -->
<!--    <filter> -->
<!--        <filter-name>openSessionInViewFilter</filter-name> -->
<!--        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class> -->
<!--        <init-param> -->
<!--            <param-name>singleSession</param-name> -->
<!--            <param-value>true</param-value> -->
<!--        </init-param> -->
<!--    </filter> -->
<!--    <filter-mapping>   -->
<!--        <filter-name>openSessionInViewFilter</filter-name> -->
<!--        <url-pattern>/*</url-pattern>   -->
<!--    </filter-mapping> -->


    <!-- ======================== 单点登录开始 ======================== -->

    <!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->
    <listener>
       <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
    </listener>
    <!-- 该过滤器用于实现单点登出功能，可选配置。 -->

    <filter>
       <filter-name>CAS Single Sign Out Filter</filter-name>
       <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
    </filter>
    <filter-mapping>
       <filter-name>CAS Single Sign Out Filter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器负责用户的认证工作，必须启用它 -->
    <filter>

       <filter-name>CASFilter</filter-name>
       <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
       <init-param>
           <param-name>casServerLoginUrl</param-name>
           <param-value>https://www.smart.com:8443/cas/login</param-value>
       </init-param>
       <init-param>
           <param-name>serverName</param-name>
           <param-value>https://localhost:7443</param-value>
       </init-param>
    </filter>
    <filter-mapping>
       <filter-name>CASFilter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->
    <filter>
       <filter-name>CAS Validation Filter</filter-name>
       <filter-class>
           org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
       </filter-class>
       <init-param>
           <param-name>casServerUrlPrefix</param-name>
           <param-value>https://www.smart.com:8443/cas</param-value>
       </init-param>
       <init-param>
           <param-name>serverName</param-name>
           <param-value>https://localhost:7443</param-value>
       </init-param>
    </filter>
    <filter-mapping>
       <filter-name>CAS Validation Filter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
    <filter>
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
       <filter-class>
           org.jasig.cas.client.util.HttpServletRequestWrapperFilter
       </filter-class>
    </filter>
    <filter-mapping>
       <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。比如AssertionHolder.getAssertion().getPrincipal().getName()。
       <filter>-->
    <filter>
       <filter-name>CAS Assertion Thread Local Filter</filter-name>
       <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
    </filter>
    <filter-mapping>
       <filter-name>CAS Assertion Thread Local Filter</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- ======================== 单点登录结束 ======================== -->





    
    
  
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    
    
    
    <servlet>
        <servlet-name>uploadServlet</servlet-name>
        <servlet-class>com.servlet.fileupload.FileUpLoad</servlet-class>
        <load-on-startup>1</load-on-startup> 
    </servlet>
    <servlet-mapping>
        <servlet-name>uploadServlet</servlet-name>
        <url-pattern>/upload.do</url-pattern>
    </servlet-mapping>
    
    <filter>  
        <filter-name>CodeFilter</filter-name>  
        <filter-class>com.servlet.fileupload.CodeFilter</filter-class>  
    </filter>  
    <filter-mapping>  
        <filter-name>CodeFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
    
    <context-param>
      <param-name>log4jConfigLocation</param-name>
      <param-value>/WEB-INF/classes/log4j.properties</param-value>
    </context-param>
    <context-param>
      <param-name>log4jRefreshInterval</param-name>
      <param-value>6000</param-value>
    </context-param>
    <listener>
      <listener-class>
        org.springframework.web.util.Log4jConfigListener
      </listener-class>
   </listener>
</web-app>